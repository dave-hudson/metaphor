Goal:
    Design and build a test runner for the metaphorc compiler

    Story:
        As: an engineer working on the metaphorc compiler
        I: want to check the compiler is working correctly
        So: my users have confidence in the output form the compiler.

    Require:
        Functionality

        Require: The test runner will run a series of tests against the metaphorc compiler.
        Require: The test runner must capture the console output of each test run.
        Require: Each test will be started in a new process.
        Require:
            Tests can be either negative or positive tests.  A test command must exit with a zero status for a passing
            positive test, or a non-zero status for a passing negative test.

        Require:
            If the test command exits with a zero status for a positive test, or a non-zero status for a negative test, then
            check if there is an expected results file.  If there is no expected results file then ignore any console output.  If
            a test has an expected result then the console output from the test command must be compared with output in the
            expected result file.  If these do not match then the test has failed.  If they do match then the test has passed.
            The compare operation is a simple character by character string compare.

        Require:
            When a test passes or fails, the details will be recorded and a summary displayed once all tests have been processed.

        Require: When a test starts, display a message to the console with the command being executed.
        Require:
            When a test completes or fails, display a message to the console saying "PASS" or "FAIL" and the test command

        Require:
            The test runner must be able to execute tests in parallel, up to some maximum limit.  The limit will default to
            the number of CPU cores on the system running the tests.

        Require:
            Some tests may fail because they take too long.  If this happens, then the test should be terminated
            by sending a KILL signal to the process that has taken too long.  By default the timeout is set at 5000 ms.
            Any test that times out will be deemed to have failed and the test result recorded as a fail.

        Require: 
            Test configuration

            Require: The set of tests wil be defined by a JSON test configuration file.
            Require: For each test there will be a series of JSON key/value pairs.

            Require:
                Each test has a set of mandatory or optional key/value pairs

                Require: Mandatory key/value: "command".  This is the command that will be executed to run the test.
                Require:
                    Mandatory key/value: "type".  Indicates if this is a positive or negative test.  Values are either
                    "positive" or "negative".

                Require:
                    Optional key/value: "expected".  If this key/value pair exists, it specifies a file that contains expected
                    results from the test.

                Require:
                    Optional key/value: "timeout".  If this key/value pair exists, it sets the timeout, in ms, for this test,
                    and overrides the default timeout.

                Require:
                    Example config:
                    [
                        {
                            "command": "build/metaphorc test/test1.m6r",
                            "type": "positive",
                            "timeout": 1000
                        },
                        {
                            "command": "build/metaphorc test/test2.m6r",
                            "type": "negative"
                        }
                    ]

    Require:
        Environment and dependency setup

        Require: The test runner application will be built with the latest version of python 3.

    Require:
        Tool invocation

        Require: The test runner should be built as a python script.
        Require: Ensure that the test runner can be run from the command line with appropriate parameters.
        Require: The default command line parameter is the name of the file with the test configurations.
        Require: The number of parallel tests that can be run can be specified with the "--parallel-tests" command line parameter.
        Require:
            If the user provides invalid parameters (any that are not specified in this requirement), or passes the "-h"
            or "--help" command line parameters, then the test runner should output the usage options for the test runner
            to the console and exit with an error status.

        Require:
            When the test runner completes it will exit with a status code of 0 if all tests have passed, or with a status code
            of 1 if any of the tests failed.

    Require:
        Code quality

        Require: Code should be indented by 4 spaces.
        Require:
            All filesystem operations should be checked to see if they have completed successfully.  If any fail then these
            should be hanldes as failures against the test that was being run.

        Require:
            The config file must be checked to ensure there are no keys that are not defined in this requirement.  If any
            are found then the test runner should emit a console error with the line number and exit with an error status.
